// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ Excel
function generateReport() {
    if (currentData.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        return;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º workbook (–∫–Ω–∏–≥—É Excel)
        const wb = XLSX.utils.book_new();
        
        // 1. –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π
        const summaryData = [
            ['–û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú'],
            ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', new Date().toLocaleString('ru-RU')],
            ['–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', realTimeActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'],
            [''],
            ['–û–ë–©–ê–Ø –°–í–û–î–ö–ê'],
            ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è'],
            ['–û–±—â–∏–π –¥–æ—Ö–æ–¥', Math.round(currentData.reduce((sum, item) => sum + item.income, 0)), '—Ä—É–±.'],
            ['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', Math.round(currentData.reduce((sum, item) => sum + item.expenses, 0)), '—Ä—É–±.'],
            ['–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å', Math.round(currentData.reduce((sum, item) => sum + item.profit, 0)), '—Ä—É–±.'],
            ['–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', currentData.reduce((sum, item) => sum + item.orders, 0), '—à—Ç.'],
            ['–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç', (currentData.reduce((sum, item) => sum + item.growth, 0) / currentData.length).toFixed(2), '%'],
            ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', Math.round((currentData.reduce((sum, item) => sum + item.income, 0)) / (currentData.reduce((sum, item) => sum + item.orders, 0))), '—Ä—É–±.'],
            [''],
            ['–ê–ù–ê–õ–ò–ó –ü–û –ü–ï–†–ò–û–î–ê–ú'],
            ['–õ—É—á—à–∏–π –º–µ—Å—è—Ü –ø–æ –¥–æ—Ö–æ–¥–∞–º:', findBestMonth('income')],
            ['–õ—É—á—à–∏–π –º–µ—Å—è—Ü –ø–æ –ø—Ä–∏–±—ã–ª–∏:', findBestMonth('profit')],
            ['–ú–µ—Å—è—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º:', findBestMonth('growth')]
        ];

        const summaryWS = XLSX.utils.aoa_to_sheet(summaryData);
        
        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (!summaryWS['!merges']) summaryWS['!merges'] = [];
        summaryWS['!merges'].push({s: {c: 0, r: 0}, e: {c: 2, r: 0}}); // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

        XLSX.utils.book_append_sheet(wb, summaryWS, '–°–≤–æ–¥–∫–∞');

        // 2. –õ–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const detailData = [
            ['–î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –ü–†–û–î–ê–ñ–ê–ú'],
            [''],
            ['–ü–µ—Ä–∏–æ–¥', '–î–∞—Ç–∞', '–î–æ—Ö–æ–¥—ã (—Ä—É–±.)', '–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)', '–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)', '–ó–∞–∫–∞–∑—ã', '–†–æ—Å—Ç (%)', '–¢–æ–ø —Ç–æ–≤–∞—Ä', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ']
        ];

        currentData.forEach(item => {
            detailData.push([
                item.monthShort,
                item.date.toLocaleDateString('ru-RU'),
                Math.round(item.income),
                Math.round(item.expenses),
                Math.round(item.profit),
                item.orders,
                item.growth.toFixed(2),
                item.product,
                new Date(item.lastUpdate).toLocaleString('ru-RU')
            ]);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        detailData.push(['']);
        detailData.push([
            '–ò–¢–û–ì–û:',
            '',
            Math.round(currentData.reduce((sum, item) => sum + item.income, 0)),
            Math.round(currentData.reduce((sum, item) => sum + item.expenses, 0)),
            Math.round(currentData.reduce((sum, item) => sum + item.profit, 0)),
            currentData.reduce((sum, item) => sum + item.orders, 0),
            (currentData.reduce((sum, item) => sum + item.growth, 0) / currentData.length).toFixed(2),
            '-',
            '-'
        ]);

        const detailWS = XLSX.utils.aoa_to_sheet(detailData);
        XLSX.utils.book_append_sheet(wb, detailWS, '–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');

        // 3. –õ–∏—Å—Ç —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ Excel)
        const chartData = [
            ['–î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í'],
            [''],
            ['–ú–µ—Å—è—Ü', '–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã', '–ü—Ä–∏–±—ã–ª—å', '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)']
        ];

        currentData.forEach(item => {
            const margin = item.income > 0 ? ((item.profit / item.income) * 100).toFixed(2) : 0;
            chartData.push([
                item.monthShort,
                Math.round(item.income),
                Math.round(item.expenses),
                Math.round(item.profit),
                margin
            ]);
        });

        const chartWS = XLSX.utils.aoa_to_sheet(chartData);
        XLSX.utils.book_append_sheet(wb, chartWS, '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤');

        // 4. –õ–∏—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        const analyticsData = [
            ['–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ü–†–û–ì–ù–û–ó–´'],
            [''],
            ['–¢–†–ï–ù–î–´ –ò –ü–û–ö–ê–ó–ê–¢–ï–õ–ò'],
            ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'],
            ['–û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–æ—Ö–æ–¥–æ–≤', getTrend(currentData.map(item => item.income)), getIncomeAnalysis()],
            ['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤', getStability(currentData.map(item => item.expenses)), getExpenseAnalysis()],
            ['–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏', getVolatility(currentData.map(item => item.profit)), getProfitAnalysis()],
            ['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', getEfficiency(), getEfficiencyAnalysis()],
            [''],
            ['–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò'],
            ['1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞–º–∏:', '', getIncomeRecommendation()],
            ['2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:', '', getExpenseRecommendation()],
            ['3. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏:', '', getProfitRecommendation()],
            [''],
            ['–ü–†–û–ì–ù–û–ó –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –ü–ï–†–ò–û–î'],
            ['–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:', Math.round(predictNextValue(currentData.map(item => item.income))), '—Ä—É–±.'],
            ['–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:', Math.round(predictNextValue(currentData.map(item => item.expenses))), '—Ä—É–±.'],
            ['–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:', Math.round(predictNextValue(currentData.map(item => item.profit))), '—Ä—É–±.']
        ];

        const analyticsWS = XLSX.utils.aoa_to_sheet(analyticsData);
        XLSX.utils.book_append_sheet(wb, analyticsWS, '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const colWidths = [
            { wpx: 200 }, // –ü–µ—Ä–∏–æ–¥/–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å
            { wpx: 120 }, // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            { wpx: 120 }, // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            { wpx: 120 }, // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            { wpx: 100 }, // –ó–∞–∫–∞–∑—ã
            { wpx: 100 }, // –†–æ—Å—Ç
            { wpx: 120 }, // –¢–æ–≤–∞—Ä
            { wpx: 180 }  // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ];

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –∫–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        Object.keys(wb.Sheets).forEach(sheetName => {
            wb.Sheets[sheetName]['!cols'] = colWidths;
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        const now = new Date();
        const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD
        const timeStr = now.toTimeString().slice(0, 5).replace(':', '-'); // HH-MM
        const fileName = `–û—Ç—á–µ—Ç_–ø–æ_–ø—Ä–æ–¥–∞–∂–∞–º_${dateStr}_${timeStr}.xlsx`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        XLSX.writeFile(wb, fileName);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showNotification('‚úÖ Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–∞—á–∞–Ω!', 'success');
        
        console.log('üìä Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:', fileName);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
function exportData() {
    if (currentData.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const dataStr = JSON.stringify(currentData, null, 2);
    const dataBlob = new Blob([dataStr], {type:'application/json'});
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `sales_data_${new Date().toISOString().slice(0,10)}.json`;
    link.click();
}