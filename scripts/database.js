class DatabaseConnection {
    constructor() {
        this.data = [];
        this.isConnected = false;
        this.updateInterval = null;
        this.realTimeMode = false;
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async connect() {
        return new Promise((resolve) => {
            setTimeout(() => {
                this.isConnected = true;
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                resolve(true);
            }, 1000);
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    generateBaseData() {
        const currentDate = new Date();
        const products = ['–¢–æ–≤–∞—Ä A', '–¢–æ–≤–∞—Ä B', '–¢–æ–≤–∞—Ä C', '–¢–æ–≤–∞—Ä D', '–¢–æ–≤–∞—Ä E'];
        const data = [];
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        for (let i = 5; i >= 0; i--) {
            const date = new Date(currentDate);
            date.setMonth(date.getMonth() - i);
            
            const monthNames = [
                '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
            ];
            
            data.push({
                id: 6 - i,
                month: monthNames[date.getMonth()],
                monthShort: date.toLocaleString('ru-RU', { month: 'short' }),
                date: new Date(date.getFullYear(), date.getMonth(), 1), // –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
                year: date.getFullYear(),
                baseIncome: 900000 + ((5-i) * 50000), // –±–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ —Ä–∞—Å—Ç–µ—Ç
                baseExpenses: 400000 + ((5-i) * 20000),
                income: 0, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                expenses: 0, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                profit: 0,
                orders: 150 + ((5-i) * 10),
                growth: 0,
                product: products[Math.floor(Math.random() * products.length)],
                lastUpdate: Date.now()
            });
        }
        
        return data;
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    updateDataRealTime() {
        if (this.data.length === 0) {
            this.data = this.generateBaseData();
        }

        this.data.forEach((item, index) => {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–ª–µ–±–∞–Ω–∏–π —Ä—ã–Ω–∫–∞
            const timeNow = Date.now();
            const timeDiff = (timeNow - item.lastUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            const marketVolatility = Math.sin(timeNow / 10000) * 0.1; // –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
            const seasonalTrend = Math.cos((timeNow / 1000) + (index * 0.5)) * 0.05; // —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ (–∫–æ–ª–µ–±–∞–Ω–∏—è ¬±10% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
            const incomeVariation = (Math.sin(timeNow / 5000 + index) * 0.1) + marketVolatility + seasonalTrend;
            item.income = Math.max(0, item.baseIncome * (1 + incomeVariation));
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –Ω–æ —Ç–æ–∂–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è)
            const expenseVariation = (Math.sin(timeNow / 8000 + index) * 0.05) + (marketVolatility * 0.5);
            item.expenses = Math.max(0, item.baseExpenses * (1 + expenseVariation));
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
            const orderVariation = Math.sin(timeNow / 6000 + index) * 15;
            item.orders = Math.max(1, Math.floor(item.orders + orderVariation));
            
            // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–æ—Å—Ç–∞
            const oldProfit = item.profit;
            item.profit = item.income - item.expenses;
            item.growth = oldProfit > 0 ? ((item.profit - oldProfit) / oldProfit) * 100 : 0;
            
            item.lastUpdate = timeNow;
        });

        return this.data;
    }

    // –°–∏–º—É–ª—è—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    async query(sql) {
        if (!this.isConnected) {
            await this.connect();
        }

        return new Promise((resolve) => {
            setTimeout(() => {
                const dynamicData = this.updateDataRealTime();
                resolve([...dynamicData]); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
            }, 200);
        });
    }

    // –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    startRealTimeUpdates(callback, interval = 2000) {
        this.realTimeMode = true;
        console.log('üîÑ –ó–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        
        this.updateInterval = setInterval(async () => {
            if (this.realTimeMode) {
                const data = await this.query('SELECT * FROM sales_data');
                callback(data);
            }
        }, interval);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    stopRealTimeUpdates() {
        this.realTimeMode = false;
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('‚èπÔ∏è –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async updateData(id, newData) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ${id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, newData);
        return Promise.resolve(true);
    }
}